{"version":3,"sources":["file:///E:/04Project/Cocos/Portal/assets/script/v2/DoorCtrl.ts"],"names":["_decorator","Component","Node","input","Input","Camera","PhysicsSystem","KeyCode","v3","Vec3","Quat","Door","trueDoor","ccclass","property","executionOrder","DoorCtrl","mainCameraWorldPos","mainCameraWorldRts","redDoor","blueDoor","virtualRedDoor","virtualBlueDoor","start","instance","on","EventType","KEY_DOWN","detectRayCollide","nd_redDoor","nd_blueDoor","nd_virtualRedDoor","nd_virtualBlueDoor","teleportDetector","teleportDetect","update","deltaTime","mainCamera","node","getWorldPosition","getWorldRotation","setDoorPlaceByDoor","turnAround","setCamPlace","camera","console","log","event","ray","screenPointToRay","element","pos","normal","rts","raycastClosest","raycastClosestResult","hitPoint","hitNormal","fromViewUp","keyCode","KEY_E","setDoorPlace","setWall","collider","KEY_Q"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAuBC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,O,OAAAA,O;AAAQC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;AACnGC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAAwCf,U;;0BAIjCgB,Q,WAFZH,OAAO,CAAC,UAAD,C,UACPE,cAAc,CAAC,CAAC,CAAF,C,UAGVD,QAAQ,CAACZ,IAAD,C,UAGRY,QAAQ,CAACZ,IAAD,C,UAGRY,QAAQ,CAACZ,IAAD,C,UAGRY,QAAQ,CAACZ,IAAD,C,UAGRY,QAAQ,CAACT,MAAD,C,qDAhBb,MAEaW,QAFb,SAE8Bf,SAF9B,CAEwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAiB5BgB,kBAjB4B,GAiBF,IAAIR,IAAJ,EAjBE;AAAA,eAmB7BS,kBAnB6B,GAmBH,IAAIR,IAAJ,EAnBG;AAAA,eAuB5BS,OAvB4B;AAAA,eAwB5BC,QAxB4B;AAAA,eAyB5BC,cAzB4B;AAAA,eA0B5BC,eA1B4B;AAAA;;AA4BpCC,QAAAA,KAAK,GAAG;AACJ;AACAP,UAAAA,QAAQ,CAACQ,QAAT,GAAoB,IAApB,CAFI,CAGJ;;AACArB,UAAAA,KAAK,CAACsB,EAAN,CAASrB,KAAK,CAACsB,SAAN,CAAgBC,QAAzB,EAAkC,KAAKC,gBAAvC,EAAwD,IAAxD,EAJI,CAKJ;;AACA,eAAKT,OAAL,GAAe;AAAA;AAAA,oCAAa,KAAKU,UAAlB,CAAf;AACA,eAAKT,QAAL,GAAgB;AAAA;AAAA,oCAAa,KAAKU,WAAlB,CAAhB;AACA,eAAKT,cAAL,GAAsB;AAAA;AAAA,4BAAS,KAAKU,iBAAd,CAAtB;AACA,eAAKT,eAAL,GAAuB;AAAA;AAAA,4BAAS,KAAKU,kBAAd,CAAvB,CATI,CAUJ;;AACA,eAAKb,OAAL,CAAac,gBAAb,CAA8BR,EAA9B,CAAiC,gBAAjC,EAAkD,MAAI;AAClD,iBAAKN,OAAL,CAAae,cAAb,CAA4B,KAAKd,QAAjC;AACH,WAFD;AAGA,eAAKA,QAAL,CAAca,gBAAd,CAA+BR,EAA/B,CAAkC,gBAAlC,EAAmD,MAAI;AACnD,iBAAKL,QAAL,CAAcc,cAAd,CAA6B,KAAKf,OAAlC;AACH,WAFD;AAMH;;AAEDgB,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB;AACA,eAAKC,UAAL,CAAgBC,IAAhB,CAAqBC,gBAArB,CAAsC,KAAKtB,kBAA3C;AACA,eAAKoB,UAAL,CAAgBC,IAAhB,CAAqBE,gBAArB,CAAsC,KAAKtB,kBAA3C,EAHsB,CAItB;;AACA,eAAKG,cAAL,CAAoBoB,kBAApB,CAAuC,KAAKtB,OAA5C;AACA,eAAKG,eAAL,CAAqBmB,kBAArB,CAAwC,KAAKrB,QAA7C;AACA,eAAKC,cAAL,CAAoBqB,UAApB;AACA,eAAKpB,eAAL,CAAqBoB,UAArB,GARsB,CAStB;;AACA,eAAKrB,cAAL,CAAoBsB,WAApB,CAAgC,KAAK1B,kBAArC,EAAwD,KAAKC,kBAA7D;AACA,eAAKI,eAAL,CAAqBqB,WAArB,CAAiC,KAAK1B,kBAAtC,EAAyD,KAAKC,kBAA9D,EAXsB,CAYtB;;AACA,eAAKG,cAAL,CAAoBoB,kBAApB,CAAuC,KAAKrB,QAA5C;AACA,eAAKE,eAAL,CAAqBmB,kBAArB,CAAwC,KAAKtB,OAA7C,EAdsB,CAetB;;AACA,eAAKA,OAAL,CAAawB,WAAb,CAAyB,KAAKtB,cAAL,CAAoBuB,MAApB,CAA2BL,gBAA3B,EAAzB,EAAuE,KAAKlB,cAAL,CAAoBuB,MAApB,CAA2BJ,gBAA3B,EAAvE;AACA,eAAKpB,QAAL,CAAcuB,WAAd,CAA0B,KAAKrB,eAAL,CAAqBsB,MAArB,CAA4BL,gBAA5B,EAA1B,EAAyE,KAAKjB,eAAL,CAAqBsB,MAArB,CAA4BJ,gBAA5B,EAAzE;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,eAAL,CAAqBsB,MAArB,CAA4BJ,gBAA5B,EAAZ;AACH;;AAGDZ,QAAAA,gBAAgB,CAACmB,KAAD,EAAqB;AAAC;AAElC,cAAIC,GAAG,GAAG,KAAKX,UAAL,CAAgBY,gBAAhB,CAAiC,GAAjC,EAAqC,GAArC,CAAV,CAFiC,CAEmB;;AACpD,cAAIC,OAAJ,CAHiC,CAGI;;AACrC,cAAIC,GAAJ,CAJiC,CAIpB;;AACb,cAAIC,MAAJ,CALiC,CAKjB;;AAChB,cAAIC,GAAG,GAAG,IAAI3C,IAAJ,EAAV,CANiC,CAMZ;;AACrB,cAAGJ,aAAa,CAACkB,QAAd,CAAuB8B,cAAvB,CAAsCN,GAAtC,CAAH,EAA8C;AAC1CE,YAAAA,OAAO,GAAG5C,aAAa,CAACkB,QAAd,CAAuB+B,oBAAjC,CAD0C,CAE1C;;AACAJ,YAAAA,GAAG,GAAGD,OAAO,CAACM,QAAd;AACAJ,YAAAA,MAAM,GAAGF,OAAO,CAACO,SAAjB;AACA/C,YAAAA,IAAI,CAACgD,UAAL,CAAgBL,GAAhB,EAAoBD,MAApB,EAA2B5C,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA7B,EAL0C,CAKJ;AAEzC,WAPD,MAQI;AACA;AACA;AACH;;AAED,kBAAOuC,KAAK,CAACY,OAAb;AACI,iBAAKpD,OAAO,CAACqD,KAAb;AACI;AACA,mBAAKzC,OAAL,CAAa0C,YAAb,CAA0BV,GAA1B,EAA8BE,GAA9B;AACA,mBAAKlC,OAAL,CAAa2C,OAAb,CAAqBZ,OAAO,CAACa,QAAR,CAAiBzB,IAAtC;AACA;;AACJ,iBAAK/B,OAAO,CAACyD,KAAb;AACI;AACA,mBAAK5C,QAAL,CAAcyC,YAAd,CAA2BV,GAA3B,EAA+BE,GAA/B;AACA,mBAAKjC,QAAL,CAAc0C,OAAd,CAAsBZ,OAAO,CAACa,QAAR,CAAiBzB,IAAvC;AACA;AAVR;AAYH;;AAxGmC,O,UAqBtBd,Q,GAAoB,I;;;;;iBAlBhB,I;;;;;;;iBAGC,I;;;;;;;iBAGM,I;;;;;;;iBAGC,I;;;;;;;iBAGN,I","sourcesContent":["import { _decorator, Component, Node, input, Input, Camera, EventKeyboard, PhysicsSystem, KeyCode,v3, Vec3, Quat, physics } from 'cc';\nimport { Door } from './Door';\nimport { trueDoor } from './trueDoor';\nconst { ccclass, property, executionOrder } = _decorator;\n\n@ccclass('DoorCtrl')\n@executionOrder(-1)\nexport class DoorCtrl extends Component {\n    // 红门\n    @property(Node)\n    nd_redDoor:Node = null !\n    // 蓝门\n    @property(Node)\n    nd_blueDoor:Node = null !\n    // 假红门\n    @property(Node)\n    nd_virtualRedDoor:Node = null !\n    // 假蓝门\n    @property(Node)\n    nd_virtualBlueDoor:Node = null !\n    //主摄像机\n    @property(Camera)\n    mainCamera:Camera = null !\n    //主摄像机世界坐标\n    private mainCameraWorldPos:Vec3 = new Vec3();\n    //主摄像机世界朝向\n    public mainCameraWorldRts:Quat = new Quat();\n    //单例\n    public static instance:DoorCtrl = null !\n    // 四个门\n    private redDoor:trueDoor;\n    private blueDoor:trueDoor;\n    private virtualRedDoor:Door;\n    private virtualBlueDoor:Door;\n\n    start() {\n        //绑定单例\n        DoorCtrl.instance = this;\n        //开启按键监听\n        input.on(Input.EventType.KEY_DOWN,this.detectRayCollide,this);\n        //新建四个门的对象\n        this.redDoor = new trueDoor(this.nd_redDoor);\n        this.blueDoor = new trueDoor(this.nd_blueDoor);\n        this.virtualRedDoor = new Door(this.nd_virtualRedDoor);\n        this.virtualBlueDoor = new Door(this.nd_virtualBlueDoor);\n        // 开启碰撞检测\n        this.redDoor.teleportDetector.on(\"onTriggerEnter\",()=>{\n            this.redDoor.teleportDetect(this.blueDoor);\n        });\n        this.blueDoor.teleportDetector.on(\"onTriggerEnter\",()=>{\n            this.blueDoor.teleportDetect(this.redDoor);\n        });\n\n\n       \n    }\n\n    update(deltaTime: number) {\n        // 1.更新主相机的坐标与朝向\n        this.mainCamera.node.getWorldPosition(this.mainCameraWorldPos);\n        this.mainCamera.node.getWorldRotation(this.mainCameraWorldRts);\n        // 2.设置虚拟门的坐标与自己的门重合，朝向相反（180°）\n        this.virtualRedDoor.setDoorPlaceByDoor(this.redDoor);\n        this.virtualBlueDoor.setDoorPlaceByDoor(this.blueDoor);\n        this.virtualRedDoor.turnAround();\n        this.virtualBlueDoor.turnAround();\n        // 3.设置虚拟门的摄像机的世界坐标与朝向与主摄像机相同\n        this.virtualRedDoor.setCamPlace(this.mainCameraWorldPos,this.mainCameraWorldRts);\n        this.virtualBlueDoor.setCamPlace(this.mainCameraWorldPos,this.mainCameraWorldRts);\n        // 4.将虚拟门的坐标与朝向设置为对方的门\n        this.virtualRedDoor.setDoorPlaceByDoor(this.blueDoor);\n        this.virtualBlueDoor.setDoorPlaceByDoor(this.redDoor);\n        // 5.将自己的门的摄像机设置为对应虚拟门的摄像机\n        this.redDoor.setCamPlace(this.virtualRedDoor.camera.getWorldPosition(),this.virtualRedDoor.camera.getWorldRotation());\n        this.blueDoor.setCamPlace(this.virtualBlueDoor.camera.getWorldPosition(),this.virtualBlueDoor.camera.getWorldRotation());\n        console.log(this.virtualBlueDoor.camera.getWorldRotation());\n    }\n\n\n    detectRayCollide(event:EventKeyboard){// 屏幕射线检测\n        \n        let ray = this.mainCamera.screenPointToRay(960,530);//射线检测点，这里根据屏幕比例可能还需要做额外的调整\n        let element:physics.PhysicsRayResult;//射线检测的结果\n        let pos:Vec3;//击中的坐标\n        let normal:Vec3;//法线向量\n        let rts = new Quat();//门的朝向\n        if(PhysicsSystem.instance.raycastClosest(ray)){\n            element = PhysicsSystem.instance.raycastClosestResult;\n            // console.log(\"founded\");\n            pos = element.hitPoint;\n            normal = element.hitNormal;\n            Quat.fromViewUp(rts,normal,v3(0,1,0));//调整视角\n             \n        }\n        else{\n            // console.log(\"not founded\");\n            return;\n        }\n        \n        switch(event.keyCode){\n            case KeyCode.KEY_E:\n                // console.log(\"press E\");\n                this.redDoor.setDoorPlace(pos,rts);\n                this.redDoor.setWall(element.collider.node);\n                break;\n            case KeyCode.KEY_Q:\n                // console.log(\"press Q\");\n                this.blueDoor.setDoorPlace(pos,rts);\n                this.blueDoor.setWall(element.collider.node);\n                break;\n        }\n    }\n}\n\n"]}